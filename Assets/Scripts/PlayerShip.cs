//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/PlayerShip.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerShip: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerShip()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerShip"",
    ""maps"": [
        {
            ""name"": ""Keyboard"",
            ""id"": ""eba22cc0-cedc-4791-875c-19a072f804f6"",
            ""actions"": [
                {
                    ""name"": ""Lift"",
                    ""type"": ""Button"",
                    ""id"": ""5afff7fb-4d9e-44db-a50f-98246652143b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Thrust"",
                    ""type"": ""Button"",
                    ""id"": ""0f12cf29-0872-4f17-bbb0-64a401ac5cdd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Lateral"",
                    ""type"": ""Button"",
                    ""id"": ""4b81a084-f414-4cab-944b-dbf73f680d23"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Yaw"",
                    ""type"": ""Button"",
                    ""id"": ""77f14ccb-46fb-466c-a6d2-a4f407b9abc6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Roll"",
                    ""type"": ""Button"",
                    ""id"": ""ac595aba-be8c-4c3f-a676-71004e8e5463"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pitch"",
                    ""type"": ""Button"",
                    ""id"": ""ff51558f-b711-4cb1-8454-c7942f10dac1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Brake"",
                    ""type"": ""Button"",
                    ""id"": ""b7d1694c-eb0e-4200-8be3-2edf4e90a94c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Fire"",
                    ""type"": ""Button"",
                    ""id"": ""9582f8b9-4648-4cbd-8ccf-ffad02cbe64b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SwapUseAimpoint"",
                    ""type"": ""Button"",
                    ""id"": ""c66f0495-079b-408b-a80e-b36f2be22c3a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""2b54f1e8-9b88-4fe2-b659-62c24f1e4a44"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Yaw"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""065bd625-b035-4437-a8fd-15cc35d4c309"",
                    ""path"": ""<Keyboard>/u"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Yaw"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""dc809aa1-edf4-45aa-ba6d-820e984b8803"",
                    ""path"": ""<Keyboard>/o"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Yaw"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""ae584663-d332-45b8-a4de-628e09e9358e"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Roll"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""6e281eb4-019a-4b7b-99ab-d200a1dfbffe"",
                    ""path"": ""<Keyboard>/j"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Roll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""fe2ef686-e757-4355-a63b-ea78f6424938"",
                    ""path"": ""<Keyboard>/l"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Roll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""4dd67fef-3ba5-473d-8f47-d4d80468f15e"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pitch"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""abb6edb3-efc4-4f5a-a07b-c52b8f778d03"",
                    ""path"": ""<Keyboard>/k"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pitch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""b6a285b3-581d-40b2-adce-d18a3616a443"",
                    ""path"": ""<Keyboard>/i"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pitch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""ff85c3b2-f026-4066-bf95-1e649e39d62f"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Lift"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""0681456f-e91e-4c15-9719-8ba7306b755c"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Lift"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""c0608b12-a515-4ba3-afbd-6ab2dcf8bf18"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Lift"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""be28fea3-5462-410d-b80f-1ac6d8e7c88a"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Lateral"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""baafa9a1-c4d5-4ddf-97c4-20aaf9fad1ff"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Lateral"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""fe95a072-f048-4f59-926c-66fef791ebf0"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Lateral"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""4fcbbc8b-96cd-4225-b3bd-3e41df683943"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Thrust"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""e5b8281b-5748-4e36-9d73-e5cd628b07d0"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Thrust"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""68bc8171-e7e8-45e8-ae5e-5ba8a220c6c6"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Thrust"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""e8bf3abe-8cfc-4cd6-b681-0d8ec0373e97"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Brake"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f8a8a836-11ce-4b0d-b423-149b31d5e8d3"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Fire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""56950272-9338-4149-91c9-0a8e667c50aa"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwapUseAimpoint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Joystick"",
            ""id"": ""d5e5adab-9e03-4b4e-b73a-a61a2e9fb495"",
            ""actions"": [
                {
                    ""name"": ""Lift"",
                    ""type"": ""Button"",
                    ""id"": ""f377f01f-ac12-45ed-be42-882ed42c070f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Thrust"",
                    ""type"": ""Value"",
                    ""id"": ""d65509bc-c6b7-4ea7-9bbe-13a871afbef5"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Lateral"",
                    ""type"": ""Value"",
                    ""id"": ""36d53eb4-3a54-4f87-8ff4-1f551db89bba"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Yaw"",
                    ""type"": ""Value"",
                    ""id"": ""da640f79-f83c-4455-8261-135d89a146f2"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Roll"",
                    ""type"": ""Value"",
                    ""id"": ""c6d3a354-e824-4690-8cb2-f36f15d85382"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Pitch"",
                    ""type"": ""Value"",
                    ""id"": ""c84e1d54-b16c-4379-8050-d67c5e2fe3e3"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Brake"",
                    ""type"": ""Button"",
                    ""id"": ""d81a0fb5-6b7b-4728-a44d-a733e02eba49"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Fire"",
                    ""type"": ""Button"",
                    ""id"": ""fc5fc78b-245a-4305-9282-05ca8034cbcf"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SwapUseAimpoint"",
                    ""type"": ""Button"",
                    ""id"": ""30eee94d-7aec-4ad0-a117-2841c34e8b4f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b3d494f4-ea3f-481a-acfe-7e48b0282b87"",
                    ""path"": ""<HID::Thrustmaster T.Flight Stick X>/stick/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Roll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""01a73243-625f-428a-a344-82af15daaf09"",
                    ""path"": ""<HID::Thrustmaster T.Flight Stick X>/stick/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pitch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""8df3a3b9-d4f4-4d79-8eca-936c001a914d"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Lift"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Negative"",
                    ""id"": ""7f8eba3a-6d68-4d33-888e-8e9dbeeb5f7e"",
                    ""path"": ""<HID::Thrustmaster T.Flight Stick X>/button7"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Lift"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Positive"",
                    ""id"": ""f3521bb0-d6ed-4f62-8f43-69fb296922c6"",
                    ""path"": ""<HID::Thrustmaster T.Flight Stick X>/button8"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Lift"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""b021cbfd-d8bc-4385-9a22-7f808222c9c0"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Lateral"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""2aaa08ea-942e-4a30-b636-3e2dfa552dfb"",
                    ""path"": ""<HID::Thrustmaster T.Flight Stick X>/button5"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Lateral"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""49f96c26-3559-489c-8bf6-05575c1ab24b"",
                    ""path"": ""<HID::Thrustmaster T.Flight Stick X>/button6"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Lateral"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""630aea85-7052-4dc2-835b-354b473a9545"",
                    ""path"": ""<HID::Thrustmaster T.Flight Stick X>/slider"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Thrust"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ca5044df-43be-4487-a72a-32681d3fb406"",
                    ""path"": ""<HID::Thrustmaster T.Flight Stick X>/button9"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Brake"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""846a52b7-a5fb-4db5-a976-6643c652526e"",
                    ""path"": ""<HID::Thrustmaster T.Flight Stick X>/trigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Fire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""979693c1-adbb-47c5-ba73-02523088ebcd"",
                    ""path"": ""<HID::Thrustmaster T.Flight Stick X>/rz"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Yaw"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a7ea8226-7b25-4ad4-b845-0d2d3399a13d"",
                    ""path"": ""<HID::Thrustmaster T.Flight Stick X>/button2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwapUseAimpoint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Gamepad"",
            ""id"": ""b8b8eb62-b089-4512-94c3-c71e67367f0d"",
            ""actions"": [
                {
                    ""name"": ""Lift"",
                    ""type"": ""Value"",
                    ""id"": ""9facf18c-c056-41b3-b400-33a294b7174d"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Thrust"",
                    ""type"": ""Value"",
                    ""id"": ""37f91260-0a68-4924-829e-5649631892f7"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Lateral"",
                    ""type"": ""Value"",
                    ""id"": ""62a2d63d-52f7-4861-a396-b6c3cf3d80b4"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Yaw"",
                    ""type"": ""Value"",
                    ""id"": ""f60ad572-13a6-42b9-abf4-5da5258ca7c4"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Roll"",
                    ""type"": ""Value"",
                    ""id"": ""85531ec1-7119-4853-8d5b-c7ab1a006f93"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Pitch"",
                    ""type"": ""Value"",
                    ""id"": ""437dcda1-3a98-408b-83e5-640dec44a7b5"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Brake"",
                    ""type"": ""Value"",
                    ""id"": ""0bfa1cca-5799-4d49-a1d4-28e9280f3886"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Fire"",
                    ""type"": ""Button"",
                    ""id"": ""f9745506-3566-4a8a-9367-c18a3fb7416e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SwapUseAimpoint"",
                    ""type"": ""Button"",
                    ""id"": ""cea317db-af1d-4320-aa58-7a26d888f88a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""2ca615f9-61b8-4902-bc96-45b481bc99b7"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Roll"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""9e8501ef-1022-4618-a4b0-3b896ab5b158"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Roll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""85123403-717a-4c00-89e9-063c01676acc"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Roll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""6891e15a-9de6-43e4-b306-b5e2b81e816d"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Roll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0cce70e0-cc0d-41c7-95ef-0bed228b5ae5"",
                    ""path"": ""<Gamepad>/rightStick/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pitch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3297d6d3-2ea3-48ae-a2eb-cb2c3b93e6f7"",
                    ""path"": ""<Gamepad>/dpad/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Lift"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""88902c88-bf03-4ac9-b374-691bcd9dc4a5"",
                    ""path"": ""<Gamepad>/leftStick/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Lateral"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5eace601-42f2-47f1-986b-d48cd897bbd4"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Brake"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d817ce5e-dc45-4037-8f85-2bfe0f9b265d"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Fire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ebded22b-6b19-491f-bec2-60c41d278ad3"",
                    ""path"": ""<Gamepad>/leftStick/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Thrust"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""827e5f6b-4a47-4458-9629-760a6c5dc19c"",
                    ""path"": ""<Gamepad>/rightStick/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Yaw"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""13546fd8-1805-4eab-94ab-2398b5b01676"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwapUseAimpoint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Mouse"",
            ""id"": ""67528978-9059-4055-a45d-1cf343fb94d2"",
            ""actions"": [
                {
                    ""name"": ""Lift"",
                    ""type"": ""Button"",
                    ""id"": ""e3c4bd27-c63f-4f47-a575-06e5bbf45b5a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Thrust"",
                    ""type"": ""Button"",
                    ""id"": ""6e438e87-f07c-4380-a770-3b7401fc4fef"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Lateral"",
                    ""type"": ""Button"",
                    ""id"": ""3b744af4-63f8-4352-9a0c-8a6194639de9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Yaw"",
                    ""type"": ""PassThrough"",
                    ""id"": ""ba001adf-ec75-4fc3-a12d-5b361fc57a4b"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Roll"",
                    ""type"": ""PassThrough"",
                    ""id"": ""dc19e280-dad7-4ccf-ac5b-acc461912b6c"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pitch"",
                    ""type"": ""PassThrough"",
                    ""id"": ""767f98c7-0ba6-459e-8c2e-8ef054fdbf50"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Brake"",
                    ""type"": ""Button"",
                    ""id"": ""517455b5-b980-4abc-810f-ecba0309eca2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Fire"",
                    ""type"": ""Button"",
                    ""id"": ""f017ada1-572e-4874-8be0-888563fece83"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SwapUseAimpoint"",
                    ""type"": ""Button"",
                    ""id"": ""1b7b513f-f8de-40c6-9bf8-f847e6ebf7dc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""39c763a3-aeb3-4e9e-9456-fe5a1f6e91b5"",
                    ""path"": ""<Mouse>/delta/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Yaw"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""a56cc95c-d309-4e24-8d48-482a97becdc0"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Roll"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""5febf6d4-ab54-44f5-9175-7ad04ddbda47"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Roll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""06ea7646-1201-4601-b09e-60578b90c8d3"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Roll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""b6abc687-bed1-432c-b6cf-67a156183cc9"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Lift"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""4ef70aac-c5c5-4239-a192-f09f936024d2"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Lift"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""f9edeccd-1bcc-4b1a-a3c0-808e7474470c"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Lift"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""a46a4f39-3f1b-4bd0-ae6b-41d3ff8fd6cd"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Lateral"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""28bab19e-84f2-456e-8d6f-8f1ff13f3bad"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Lateral"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""f64ef3e1-a831-4810-abb2-a6ab36b62af2"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Lateral"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""6278c3c2-6b74-4eaf-9458-57eab841a8cf"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Thrust"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""2a817fe4-e1af-4084-95cd-da1b51cd3b6e"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Thrust"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""ef438adc-7f06-4545-b102-eed1ad77e0e8"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Thrust"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""81d39d8e-1878-426b-b015-c6b5562f646b"",
                    ""path"": ""<Keyboard>/leftCtrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Brake"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""495e7049-c58a-4600-95fa-e47c6938b005"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Fire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5a0a79a4-b41b-42da-9376-6c5840290384"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwapUseAimpoint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e058a77c-4533-4e5d-bdd8-2b5df1902f44"",
                    ""path"": ""<Mouse>/delta/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pitch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Joystick"",
            ""bindingGroup"": ""Joystick"",
            ""devices"": [
                {
                    ""devicePath"": ""<Joystick>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Keyboard
        m_Keyboard = asset.FindActionMap("Keyboard", throwIfNotFound: true);
        m_Keyboard_Lift = m_Keyboard.FindAction("Lift", throwIfNotFound: true);
        m_Keyboard_Thrust = m_Keyboard.FindAction("Thrust", throwIfNotFound: true);
        m_Keyboard_Lateral = m_Keyboard.FindAction("Lateral", throwIfNotFound: true);
        m_Keyboard_Yaw = m_Keyboard.FindAction("Yaw", throwIfNotFound: true);
        m_Keyboard_Roll = m_Keyboard.FindAction("Roll", throwIfNotFound: true);
        m_Keyboard_Pitch = m_Keyboard.FindAction("Pitch", throwIfNotFound: true);
        m_Keyboard_Brake = m_Keyboard.FindAction("Brake", throwIfNotFound: true);
        m_Keyboard_Fire = m_Keyboard.FindAction("Fire", throwIfNotFound: true);
        m_Keyboard_SwapUseAimpoint = m_Keyboard.FindAction("SwapUseAimpoint", throwIfNotFound: true);
        // Joystick
        m_Joystick = asset.FindActionMap("Joystick", throwIfNotFound: true);
        m_Joystick_Lift = m_Joystick.FindAction("Lift", throwIfNotFound: true);
        m_Joystick_Thrust = m_Joystick.FindAction("Thrust", throwIfNotFound: true);
        m_Joystick_Lateral = m_Joystick.FindAction("Lateral", throwIfNotFound: true);
        m_Joystick_Yaw = m_Joystick.FindAction("Yaw", throwIfNotFound: true);
        m_Joystick_Roll = m_Joystick.FindAction("Roll", throwIfNotFound: true);
        m_Joystick_Pitch = m_Joystick.FindAction("Pitch", throwIfNotFound: true);
        m_Joystick_Brake = m_Joystick.FindAction("Brake", throwIfNotFound: true);
        m_Joystick_Fire = m_Joystick.FindAction("Fire", throwIfNotFound: true);
        m_Joystick_SwapUseAimpoint = m_Joystick.FindAction("SwapUseAimpoint", throwIfNotFound: true);
        // Gamepad
        m_Gamepad = asset.FindActionMap("Gamepad", throwIfNotFound: true);
        m_Gamepad_Lift = m_Gamepad.FindAction("Lift", throwIfNotFound: true);
        m_Gamepad_Thrust = m_Gamepad.FindAction("Thrust", throwIfNotFound: true);
        m_Gamepad_Lateral = m_Gamepad.FindAction("Lateral", throwIfNotFound: true);
        m_Gamepad_Yaw = m_Gamepad.FindAction("Yaw", throwIfNotFound: true);
        m_Gamepad_Roll = m_Gamepad.FindAction("Roll", throwIfNotFound: true);
        m_Gamepad_Pitch = m_Gamepad.FindAction("Pitch", throwIfNotFound: true);
        m_Gamepad_Brake = m_Gamepad.FindAction("Brake", throwIfNotFound: true);
        m_Gamepad_Fire = m_Gamepad.FindAction("Fire", throwIfNotFound: true);
        m_Gamepad_SwapUseAimpoint = m_Gamepad.FindAction("SwapUseAimpoint", throwIfNotFound: true);
        // Mouse
        m_Mouse = asset.FindActionMap("Mouse", throwIfNotFound: true);
        m_Mouse_Lift = m_Mouse.FindAction("Lift", throwIfNotFound: true);
        m_Mouse_Thrust = m_Mouse.FindAction("Thrust", throwIfNotFound: true);
        m_Mouse_Lateral = m_Mouse.FindAction("Lateral", throwIfNotFound: true);
        m_Mouse_Yaw = m_Mouse.FindAction("Yaw", throwIfNotFound: true);
        m_Mouse_Roll = m_Mouse.FindAction("Roll", throwIfNotFound: true);
        m_Mouse_Pitch = m_Mouse.FindAction("Pitch", throwIfNotFound: true);
        m_Mouse_Brake = m_Mouse.FindAction("Brake", throwIfNotFound: true);
        m_Mouse_Fire = m_Mouse.FindAction("Fire", throwIfNotFound: true);
        m_Mouse_SwapUseAimpoint = m_Mouse.FindAction("SwapUseAimpoint", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Keyboard
    private readonly InputActionMap m_Keyboard;
    private List<IKeyboardActions> m_KeyboardActionsCallbackInterfaces = new List<IKeyboardActions>();
    private readonly InputAction m_Keyboard_Lift;
    private readonly InputAction m_Keyboard_Thrust;
    private readonly InputAction m_Keyboard_Lateral;
    private readonly InputAction m_Keyboard_Yaw;
    private readonly InputAction m_Keyboard_Roll;
    private readonly InputAction m_Keyboard_Pitch;
    private readonly InputAction m_Keyboard_Brake;
    private readonly InputAction m_Keyboard_Fire;
    private readonly InputAction m_Keyboard_SwapUseAimpoint;
    public struct KeyboardActions
    {
        private @PlayerShip m_Wrapper;
        public KeyboardActions(@PlayerShip wrapper) { m_Wrapper = wrapper; }
        public InputAction @Lift => m_Wrapper.m_Keyboard_Lift;
        public InputAction @Thrust => m_Wrapper.m_Keyboard_Thrust;
        public InputAction @Lateral => m_Wrapper.m_Keyboard_Lateral;
        public InputAction @Yaw => m_Wrapper.m_Keyboard_Yaw;
        public InputAction @Roll => m_Wrapper.m_Keyboard_Roll;
        public InputAction @Pitch => m_Wrapper.m_Keyboard_Pitch;
        public InputAction @Brake => m_Wrapper.m_Keyboard_Brake;
        public InputAction @Fire => m_Wrapper.m_Keyboard_Fire;
        public InputAction @SwapUseAimpoint => m_Wrapper.m_Keyboard_SwapUseAimpoint;
        public InputActionMap Get() { return m_Wrapper.m_Keyboard; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(KeyboardActions set) { return set.Get(); }
        public void AddCallbacks(IKeyboardActions instance)
        {
            if (instance == null || m_Wrapper.m_KeyboardActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_KeyboardActionsCallbackInterfaces.Add(instance);
            @Lift.started += instance.OnLift;
            @Lift.performed += instance.OnLift;
            @Lift.canceled += instance.OnLift;
            @Thrust.started += instance.OnThrust;
            @Thrust.performed += instance.OnThrust;
            @Thrust.canceled += instance.OnThrust;
            @Lateral.started += instance.OnLateral;
            @Lateral.performed += instance.OnLateral;
            @Lateral.canceled += instance.OnLateral;
            @Yaw.started += instance.OnYaw;
            @Yaw.performed += instance.OnYaw;
            @Yaw.canceled += instance.OnYaw;
            @Roll.started += instance.OnRoll;
            @Roll.performed += instance.OnRoll;
            @Roll.canceled += instance.OnRoll;
            @Pitch.started += instance.OnPitch;
            @Pitch.performed += instance.OnPitch;
            @Pitch.canceled += instance.OnPitch;
            @Brake.started += instance.OnBrake;
            @Brake.performed += instance.OnBrake;
            @Brake.canceled += instance.OnBrake;
            @Fire.started += instance.OnFire;
            @Fire.performed += instance.OnFire;
            @Fire.canceled += instance.OnFire;
            @SwapUseAimpoint.started += instance.OnSwapUseAimpoint;
            @SwapUseAimpoint.performed += instance.OnSwapUseAimpoint;
            @SwapUseAimpoint.canceled += instance.OnSwapUseAimpoint;
        }

        private void UnregisterCallbacks(IKeyboardActions instance)
        {
            @Lift.started -= instance.OnLift;
            @Lift.performed -= instance.OnLift;
            @Lift.canceled -= instance.OnLift;
            @Thrust.started -= instance.OnThrust;
            @Thrust.performed -= instance.OnThrust;
            @Thrust.canceled -= instance.OnThrust;
            @Lateral.started -= instance.OnLateral;
            @Lateral.performed -= instance.OnLateral;
            @Lateral.canceled -= instance.OnLateral;
            @Yaw.started -= instance.OnYaw;
            @Yaw.performed -= instance.OnYaw;
            @Yaw.canceled -= instance.OnYaw;
            @Roll.started -= instance.OnRoll;
            @Roll.performed -= instance.OnRoll;
            @Roll.canceled -= instance.OnRoll;
            @Pitch.started -= instance.OnPitch;
            @Pitch.performed -= instance.OnPitch;
            @Pitch.canceled -= instance.OnPitch;
            @Brake.started -= instance.OnBrake;
            @Brake.performed -= instance.OnBrake;
            @Brake.canceled -= instance.OnBrake;
            @Fire.started -= instance.OnFire;
            @Fire.performed -= instance.OnFire;
            @Fire.canceled -= instance.OnFire;
            @SwapUseAimpoint.started -= instance.OnSwapUseAimpoint;
            @SwapUseAimpoint.performed -= instance.OnSwapUseAimpoint;
            @SwapUseAimpoint.canceled -= instance.OnSwapUseAimpoint;
        }

        public void RemoveCallbacks(IKeyboardActions instance)
        {
            if (m_Wrapper.m_KeyboardActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IKeyboardActions instance)
        {
            foreach (var item in m_Wrapper.m_KeyboardActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_KeyboardActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public KeyboardActions @Keyboard => new KeyboardActions(this);

    // Joystick
    private readonly InputActionMap m_Joystick;
    private List<IJoystickActions> m_JoystickActionsCallbackInterfaces = new List<IJoystickActions>();
    private readonly InputAction m_Joystick_Lift;
    private readonly InputAction m_Joystick_Thrust;
    private readonly InputAction m_Joystick_Lateral;
    private readonly InputAction m_Joystick_Yaw;
    private readonly InputAction m_Joystick_Roll;
    private readonly InputAction m_Joystick_Pitch;
    private readonly InputAction m_Joystick_Brake;
    private readonly InputAction m_Joystick_Fire;
    private readonly InputAction m_Joystick_SwapUseAimpoint;
    public struct JoystickActions
    {
        private @PlayerShip m_Wrapper;
        public JoystickActions(@PlayerShip wrapper) { m_Wrapper = wrapper; }
        public InputAction @Lift => m_Wrapper.m_Joystick_Lift;
        public InputAction @Thrust => m_Wrapper.m_Joystick_Thrust;
        public InputAction @Lateral => m_Wrapper.m_Joystick_Lateral;
        public InputAction @Yaw => m_Wrapper.m_Joystick_Yaw;
        public InputAction @Roll => m_Wrapper.m_Joystick_Roll;
        public InputAction @Pitch => m_Wrapper.m_Joystick_Pitch;
        public InputAction @Brake => m_Wrapper.m_Joystick_Brake;
        public InputAction @Fire => m_Wrapper.m_Joystick_Fire;
        public InputAction @SwapUseAimpoint => m_Wrapper.m_Joystick_SwapUseAimpoint;
        public InputActionMap Get() { return m_Wrapper.m_Joystick; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(JoystickActions set) { return set.Get(); }
        public void AddCallbacks(IJoystickActions instance)
        {
            if (instance == null || m_Wrapper.m_JoystickActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_JoystickActionsCallbackInterfaces.Add(instance);
            @Lift.started += instance.OnLift;
            @Lift.performed += instance.OnLift;
            @Lift.canceled += instance.OnLift;
            @Thrust.started += instance.OnThrust;
            @Thrust.performed += instance.OnThrust;
            @Thrust.canceled += instance.OnThrust;
            @Lateral.started += instance.OnLateral;
            @Lateral.performed += instance.OnLateral;
            @Lateral.canceled += instance.OnLateral;
            @Yaw.started += instance.OnYaw;
            @Yaw.performed += instance.OnYaw;
            @Yaw.canceled += instance.OnYaw;
            @Roll.started += instance.OnRoll;
            @Roll.performed += instance.OnRoll;
            @Roll.canceled += instance.OnRoll;
            @Pitch.started += instance.OnPitch;
            @Pitch.performed += instance.OnPitch;
            @Pitch.canceled += instance.OnPitch;
            @Brake.started += instance.OnBrake;
            @Brake.performed += instance.OnBrake;
            @Brake.canceled += instance.OnBrake;
            @Fire.started += instance.OnFire;
            @Fire.performed += instance.OnFire;
            @Fire.canceled += instance.OnFire;
            @SwapUseAimpoint.started += instance.OnSwapUseAimpoint;
            @SwapUseAimpoint.performed += instance.OnSwapUseAimpoint;
            @SwapUseAimpoint.canceled += instance.OnSwapUseAimpoint;
        }

        private void UnregisterCallbacks(IJoystickActions instance)
        {
            @Lift.started -= instance.OnLift;
            @Lift.performed -= instance.OnLift;
            @Lift.canceled -= instance.OnLift;
            @Thrust.started -= instance.OnThrust;
            @Thrust.performed -= instance.OnThrust;
            @Thrust.canceled -= instance.OnThrust;
            @Lateral.started -= instance.OnLateral;
            @Lateral.performed -= instance.OnLateral;
            @Lateral.canceled -= instance.OnLateral;
            @Yaw.started -= instance.OnYaw;
            @Yaw.performed -= instance.OnYaw;
            @Yaw.canceled -= instance.OnYaw;
            @Roll.started -= instance.OnRoll;
            @Roll.performed -= instance.OnRoll;
            @Roll.canceled -= instance.OnRoll;
            @Pitch.started -= instance.OnPitch;
            @Pitch.performed -= instance.OnPitch;
            @Pitch.canceled -= instance.OnPitch;
            @Brake.started -= instance.OnBrake;
            @Brake.performed -= instance.OnBrake;
            @Brake.canceled -= instance.OnBrake;
            @Fire.started -= instance.OnFire;
            @Fire.performed -= instance.OnFire;
            @Fire.canceled -= instance.OnFire;
            @SwapUseAimpoint.started -= instance.OnSwapUseAimpoint;
            @SwapUseAimpoint.performed -= instance.OnSwapUseAimpoint;
            @SwapUseAimpoint.canceled -= instance.OnSwapUseAimpoint;
        }

        public void RemoveCallbacks(IJoystickActions instance)
        {
            if (m_Wrapper.m_JoystickActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IJoystickActions instance)
        {
            foreach (var item in m_Wrapper.m_JoystickActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_JoystickActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public JoystickActions @Joystick => new JoystickActions(this);

    // Gamepad
    private readonly InputActionMap m_Gamepad;
    private List<IGamepadActions> m_GamepadActionsCallbackInterfaces = new List<IGamepadActions>();
    private readonly InputAction m_Gamepad_Lift;
    private readonly InputAction m_Gamepad_Thrust;
    private readonly InputAction m_Gamepad_Lateral;
    private readonly InputAction m_Gamepad_Yaw;
    private readonly InputAction m_Gamepad_Roll;
    private readonly InputAction m_Gamepad_Pitch;
    private readonly InputAction m_Gamepad_Brake;
    private readonly InputAction m_Gamepad_Fire;
    private readonly InputAction m_Gamepad_SwapUseAimpoint;
    public struct GamepadActions
    {
        private @PlayerShip m_Wrapper;
        public GamepadActions(@PlayerShip wrapper) { m_Wrapper = wrapper; }
        public InputAction @Lift => m_Wrapper.m_Gamepad_Lift;
        public InputAction @Thrust => m_Wrapper.m_Gamepad_Thrust;
        public InputAction @Lateral => m_Wrapper.m_Gamepad_Lateral;
        public InputAction @Yaw => m_Wrapper.m_Gamepad_Yaw;
        public InputAction @Roll => m_Wrapper.m_Gamepad_Roll;
        public InputAction @Pitch => m_Wrapper.m_Gamepad_Pitch;
        public InputAction @Brake => m_Wrapper.m_Gamepad_Brake;
        public InputAction @Fire => m_Wrapper.m_Gamepad_Fire;
        public InputAction @SwapUseAimpoint => m_Wrapper.m_Gamepad_SwapUseAimpoint;
        public InputActionMap Get() { return m_Wrapper.m_Gamepad; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GamepadActions set) { return set.Get(); }
        public void AddCallbacks(IGamepadActions instance)
        {
            if (instance == null || m_Wrapper.m_GamepadActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GamepadActionsCallbackInterfaces.Add(instance);
            @Lift.started += instance.OnLift;
            @Lift.performed += instance.OnLift;
            @Lift.canceled += instance.OnLift;
            @Thrust.started += instance.OnThrust;
            @Thrust.performed += instance.OnThrust;
            @Thrust.canceled += instance.OnThrust;
            @Lateral.started += instance.OnLateral;
            @Lateral.performed += instance.OnLateral;
            @Lateral.canceled += instance.OnLateral;
            @Yaw.started += instance.OnYaw;
            @Yaw.performed += instance.OnYaw;
            @Yaw.canceled += instance.OnYaw;
            @Roll.started += instance.OnRoll;
            @Roll.performed += instance.OnRoll;
            @Roll.canceled += instance.OnRoll;
            @Pitch.started += instance.OnPitch;
            @Pitch.performed += instance.OnPitch;
            @Pitch.canceled += instance.OnPitch;
            @Brake.started += instance.OnBrake;
            @Brake.performed += instance.OnBrake;
            @Brake.canceled += instance.OnBrake;
            @Fire.started += instance.OnFire;
            @Fire.performed += instance.OnFire;
            @Fire.canceled += instance.OnFire;
            @SwapUseAimpoint.started += instance.OnSwapUseAimpoint;
            @SwapUseAimpoint.performed += instance.OnSwapUseAimpoint;
            @SwapUseAimpoint.canceled += instance.OnSwapUseAimpoint;
        }

        private void UnregisterCallbacks(IGamepadActions instance)
        {
            @Lift.started -= instance.OnLift;
            @Lift.performed -= instance.OnLift;
            @Lift.canceled -= instance.OnLift;
            @Thrust.started -= instance.OnThrust;
            @Thrust.performed -= instance.OnThrust;
            @Thrust.canceled -= instance.OnThrust;
            @Lateral.started -= instance.OnLateral;
            @Lateral.performed -= instance.OnLateral;
            @Lateral.canceled -= instance.OnLateral;
            @Yaw.started -= instance.OnYaw;
            @Yaw.performed -= instance.OnYaw;
            @Yaw.canceled -= instance.OnYaw;
            @Roll.started -= instance.OnRoll;
            @Roll.performed -= instance.OnRoll;
            @Roll.canceled -= instance.OnRoll;
            @Pitch.started -= instance.OnPitch;
            @Pitch.performed -= instance.OnPitch;
            @Pitch.canceled -= instance.OnPitch;
            @Brake.started -= instance.OnBrake;
            @Brake.performed -= instance.OnBrake;
            @Brake.canceled -= instance.OnBrake;
            @Fire.started -= instance.OnFire;
            @Fire.performed -= instance.OnFire;
            @Fire.canceled -= instance.OnFire;
            @SwapUseAimpoint.started -= instance.OnSwapUseAimpoint;
            @SwapUseAimpoint.performed -= instance.OnSwapUseAimpoint;
            @SwapUseAimpoint.canceled -= instance.OnSwapUseAimpoint;
        }

        public void RemoveCallbacks(IGamepadActions instance)
        {
            if (m_Wrapper.m_GamepadActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGamepadActions instance)
        {
            foreach (var item in m_Wrapper.m_GamepadActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GamepadActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GamepadActions @Gamepad => new GamepadActions(this);

    // Mouse
    private readonly InputActionMap m_Mouse;
    private List<IMouseActions> m_MouseActionsCallbackInterfaces = new List<IMouseActions>();
    private readonly InputAction m_Mouse_Lift;
    private readonly InputAction m_Mouse_Thrust;
    private readonly InputAction m_Mouse_Lateral;
    private readonly InputAction m_Mouse_Yaw;
    private readonly InputAction m_Mouse_Roll;
    private readonly InputAction m_Mouse_Pitch;
    private readonly InputAction m_Mouse_Brake;
    private readonly InputAction m_Mouse_Fire;
    private readonly InputAction m_Mouse_SwapUseAimpoint;
    public struct MouseActions
    {
        private @PlayerShip m_Wrapper;
        public MouseActions(@PlayerShip wrapper) { m_Wrapper = wrapper; }
        public InputAction @Lift => m_Wrapper.m_Mouse_Lift;
        public InputAction @Thrust => m_Wrapper.m_Mouse_Thrust;
        public InputAction @Lateral => m_Wrapper.m_Mouse_Lateral;
        public InputAction @Yaw => m_Wrapper.m_Mouse_Yaw;
        public InputAction @Roll => m_Wrapper.m_Mouse_Roll;
        public InputAction @Pitch => m_Wrapper.m_Mouse_Pitch;
        public InputAction @Brake => m_Wrapper.m_Mouse_Brake;
        public InputAction @Fire => m_Wrapper.m_Mouse_Fire;
        public InputAction @SwapUseAimpoint => m_Wrapper.m_Mouse_SwapUseAimpoint;
        public InputActionMap Get() { return m_Wrapper.m_Mouse; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MouseActions set) { return set.Get(); }
        public void AddCallbacks(IMouseActions instance)
        {
            if (instance == null || m_Wrapper.m_MouseActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MouseActionsCallbackInterfaces.Add(instance);
            @Lift.started += instance.OnLift;
            @Lift.performed += instance.OnLift;
            @Lift.canceled += instance.OnLift;
            @Thrust.started += instance.OnThrust;
            @Thrust.performed += instance.OnThrust;
            @Thrust.canceled += instance.OnThrust;
            @Lateral.started += instance.OnLateral;
            @Lateral.performed += instance.OnLateral;
            @Lateral.canceled += instance.OnLateral;
            @Yaw.started += instance.OnYaw;
            @Yaw.performed += instance.OnYaw;
            @Yaw.canceled += instance.OnYaw;
            @Roll.started += instance.OnRoll;
            @Roll.performed += instance.OnRoll;
            @Roll.canceled += instance.OnRoll;
            @Pitch.started += instance.OnPitch;
            @Pitch.performed += instance.OnPitch;
            @Pitch.canceled += instance.OnPitch;
            @Brake.started += instance.OnBrake;
            @Brake.performed += instance.OnBrake;
            @Brake.canceled += instance.OnBrake;
            @Fire.started += instance.OnFire;
            @Fire.performed += instance.OnFire;
            @Fire.canceled += instance.OnFire;
            @SwapUseAimpoint.started += instance.OnSwapUseAimpoint;
            @SwapUseAimpoint.performed += instance.OnSwapUseAimpoint;
            @SwapUseAimpoint.canceled += instance.OnSwapUseAimpoint;
        }

        private void UnregisterCallbacks(IMouseActions instance)
        {
            @Lift.started -= instance.OnLift;
            @Lift.performed -= instance.OnLift;
            @Lift.canceled -= instance.OnLift;
            @Thrust.started -= instance.OnThrust;
            @Thrust.performed -= instance.OnThrust;
            @Thrust.canceled -= instance.OnThrust;
            @Lateral.started -= instance.OnLateral;
            @Lateral.performed -= instance.OnLateral;
            @Lateral.canceled -= instance.OnLateral;
            @Yaw.started -= instance.OnYaw;
            @Yaw.performed -= instance.OnYaw;
            @Yaw.canceled -= instance.OnYaw;
            @Roll.started -= instance.OnRoll;
            @Roll.performed -= instance.OnRoll;
            @Roll.canceled -= instance.OnRoll;
            @Pitch.started -= instance.OnPitch;
            @Pitch.performed -= instance.OnPitch;
            @Pitch.canceled -= instance.OnPitch;
            @Brake.started -= instance.OnBrake;
            @Brake.performed -= instance.OnBrake;
            @Brake.canceled -= instance.OnBrake;
            @Fire.started -= instance.OnFire;
            @Fire.performed -= instance.OnFire;
            @Fire.canceled -= instance.OnFire;
            @SwapUseAimpoint.started -= instance.OnSwapUseAimpoint;
            @SwapUseAimpoint.performed -= instance.OnSwapUseAimpoint;
            @SwapUseAimpoint.canceled -= instance.OnSwapUseAimpoint;
        }

        public void RemoveCallbacks(IMouseActions instance)
        {
            if (m_Wrapper.m_MouseActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMouseActions instance)
        {
            foreach (var item in m_Wrapper.m_MouseActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MouseActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MouseActions @Mouse => new MouseActions(this);
    private int m_KeyboardSchemeIndex = -1;
    public InputControlScheme KeyboardScheme
    {
        get
        {
            if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
            return asset.controlSchemes[m_KeyboardSchemeIndex];
        }
    }
    private int m_GamepadSchemeIndex = -1;
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    private int m_JoystickSchemeIndex = -1;
    public InputControlScheme JoystickScheme
    {
        get
        {
            if (m_JoystickSchemeIndex == -1) m_JoystickSchemeIndex = asset.FindControlSchemeIndex("Joystick");
            return asset.controlSchemes[m_JoystickSchemeIndex];
        }
    }
    public interface IKeyboardActions
    {
        void OnLift(InputAction.CallbackContext context);
        void OnThrust(InputAction.CallbackContext context);
        void OnLateral(InputAction.CallbackContext context);
        void OnYaw(InputAction.CallbackContext context);
        void OnRoll(InputAction.CallbackContext context);
        void OnPitch(InputAction.CallbackContext context);
        void OnBrake(InputAction.CallbackContext context);
        void OnFire(InputAction.CallbackContext context);
        void OnSwapUseAimpoint(InputAction.CallbackContext context);
    }
    public interface IJoystickActions
    {
        void OnLift(InputAction.CallbackContext context);
        void OnThrust(InputAction.CallbackContext context);
        void OnLateral(InputAction.CallbackContext context);
        void OnYaw(InputAction.CallbackContext context);
        void OnRoll(InputAction.CallbackContext context);
        void OnPitch(InputAction.CallbackContext context);
        void OnBrake(InputAction.CallbackContext context);
        void OnFire(InputAction.CallbackContext context);
        void OnSwapUseAimpoint(InputAction.CallbackContext context);
    }
    public interface IGamepadActions
    {
        void OnLift(InputAction.CallbackContext context);
        void OnThrust(InputAction.CallbackContext context);
        void OnLateral(InputAction.CallbackContext context);
        void OnYaw(InputAction.CallbackContext context);
        void OnRoll(InputAction.CallbackContext context);
        void OnPitch(InputAction.CallbackContext context);
        void OnBrake(InputAction.CallbackContext context);
        void OnFire(InputAction.CallbackContext context);
        void OnSwapUseAimpoint(InputAction.CallbackContext context);
    }
    public interface IMouseActions
    {
        void OnLift(InputAction.CallbackContext context);
        void OnThrust(InputAction.CallbackContext context);
        void OnLateral(InputAction.CallbackContext context);
        void OnYaw(InputAction.CallbackContext context);
        void OnRoll(InputAction.CallbackContext context);
        void OnPitch(InputAction.CallbackContext context);
        void OnBrake(InputAction.CallbackContext context);
        void OnFire(InputAction.CallbackContext context);
        void OnSwapUseAimpoint(InputAction.CallbackContext context);
    }
}
